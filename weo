#!/usr/bin/python3
#
# weo-0.0.1:
# this first version of weo (watch episode of) can just read the
# "Tagesschau 20 Uhr (HD)"-feed
#
# TODO:
# - get feeds and their attributes (expected date and time) from a feeds-file
# - get player configuration from file
#
# by AndrÃ© Klausnitzer, no license

import feedparser
import json

import os
import sys
import time
import datetime
import argparse
import configparser
from subprocess import call

DEBUG = False

# defaults
PLAYER = "mplayer"
CONFIG_FILE = ".weorc"
FEED_FILE = ".weofeeds"
HOME_DIR = os.path.expanduser("~")
FEED = None

def get_arguments():
    global DEBUG
    global FEED

    # parse commandline arguments
    parser = argparse.ArgumentParser(description="weo - watch episode of")
    parser.add_argument('-v', '--verbose', help='enable debugging', action='count')
    parser.add_argument('feed', metavar='FEED', help='feed shortcut', nargs=1)

    args = vars(parser.parse_args())

    if args["verbose"] is not None:
        if args["verbose"] > 0:
            DEBUG = True
    if args["feed"] is not None:
        if DEBUG:
            print("feed = " + str(args["feed"][0]))
        FEED = args["feed"][0]


def get_config():
    if DEBUG:
        print('TODO  get_config()')


feeds_json = None

def get_feeds():
    global feeds_json

    with open(HOME_DIR + "/" + FEED_FILE) as json_file:
        feeds_json = json.load(json_file)

    if feeds_json is not None:
        if DEBUG:
            print("feeds json = " + str(feeds_json))
    else:
        print("no feed file or feed file not valid at " + HOME_DIR + "/" + FEED_FILE)


def play(url):
    if DEBUG:
        print("url = " + url)

    call([PLAYER, url])


def get_video_link(enclosure, link_type):
    video_link = None

    for item in enclosure:
        if "video/mp4" in item["type"]:
            video_link = item[link_type]

    return video_link


def is_matching(feed, current_item):
    matching = False

    publish_date = current_item['published_parsed']
    publish_date_unparsed = current_item['published']
    publish_date_formatted = datetime.datetime.strptime(
        str(publish_date_unparsed),
        "%a, %d %b %Y %H:%M:%S %z"
    )
    today = datetime.datetime.today()
    published_uts = publish_date_formatted.timestamp()
    today_uts = today.timestamp()
    if DEBUG:
        print("today = " + str(today))
    match_type = feeds_json[feed]["match_type"]
    match = feeds_json[feed]["match"]

    # match by day
    if match_type == "d":
        if match == 0:
            if today.year == publish_date.tm_year \
            and today.month == publish_date.tm_mon \
            and today.day == publish_date.tm_mday:
                matching = True
        else:
            day_match = match * 86400
            if DEBUG:
                print(str(today_uts - day_match) + " <? " \
                + str(published_uts) + ", day_match = " \
                + str(day_match))
            if (today_uts - day_match) < published_uts:
                matching = True

    # match by week
    elif match_type == "w":
        if match == 0:
            todays_week = today.strftime("%W")
            published_week = publish_date_formatted.strftime("%W")
            if DEBUG:
                print(todays_week + " ?= " + published_week)
            if todays_week == published_week:
                matching = True
        else:
            week_match = match * 604800
            if DEBUG:
                print(str(today_uts - week_match) + " <? " \
                + str(published_uts) + ", week_match = " \
                + str(week_match))
            if (today_uts - week_match) < published_uts:
                matching = True

    # match by month
    elif match_type == "m":
        if match == 0:
            if today.year == publish_date.tm_year \
            and today.month == publish_date.tm_mon:
                matching = True
        else:
            month_match = match * 18144000
            if DEBUG:
                print(str(today_uts - month_match) + " <? " \
                + str(published_uts) + ", month_match = " \
                + str(month_match))
            if (today_uts - month_match) < published_uts:
                matching = True

    else:
        print("match_type '" + match_type + "' not implemented")
        sys.exit(5)

    return matching


def fetch_and_play(feed):
    play_now = False
    expected_date = datetime.datetime.today()

    feed_url = feeds_json[feed]["url"]
    feed_parsed = feedparser.parse(feed_url)
    feed_title = feed_parsed['channel']['title']
    if DEBUG:
        print("title = " + feed_title)

    # sort feed items to ensure we get the latest episode
    feed_sorted = sorted(feed_parsed["items"], key=lambda entry: entry["published_parsed"])
    feed_sorted.reverse()
    current_item = feed_sorted[0]
    publish_date = current_item['published_parsed']

    # check wether last episode is from today
    if is_matching(feed, current_item):
        print("last episode is from today, playing now ..")
        play_now = True
    else:
        print("last episode is from " + str(publish_date.tm_mday) + "." + str(publish_date.tm_mon) + "." + str(publish_date.tm_year))

    item_video_link = None
    if "media_content" in current_item:
        item_video_link = get_video_link(current_item['media_content'], "url")
    elif "links" in current_item:
        item_video_link = get_video_link(current_item['links'], "href")

    if DEBUG:
        print("video link = " + str(item_video_link))

    if item_video_link is None:
        print("cannot find video link")
        sys.exit(3)

    if play_now is False:
        # ask or wait 10 seconds
        try:
            print("play in .. ", end="", flush=True)
            i = 9
            while i > 0:
                print(str(i) + " ", end="", flush=True)
                time.sleep(1)
                i -= 1
            print("")
        except:
            print(" aborted")
            sys.exit(4)
            # TODO  change to question: "play anyway? [y/N]" (default: No)

    play(item_video_link)

    if DEBUG:
        print("published parsed = " + str(publish_date))
    for item_property in current_item:
        if DEBUG:
            print(str(item_property) + " = " + str(current_item[item_property]))


def main():
    get_arguments()
    get_config()
    get_feeds()

    if DEBUG:
        print("debug enabled")

    fetch_and_play(FEED)


main()

