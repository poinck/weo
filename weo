#!/usr/bin/python3
#
# weo:
# watch episode of feeds listed in JSON-formatted ~/.weofeeds
#
# by AndrÃ© Klausnitzer, no license

import feedparser
import json
import os
import sys
import time
import datetime
import argparse
import configparser
import subprocess

DEBUG = False
LIST = False

# defaults
PLAYER = "mpv"
CONFIG_FILE = ".weorc"
FEED_FILE = ".weofeeds"
HOME_DIR = os.path.expanduser("~")
FEED = None

# colors
C_CLEAR = '\x1b[0m'
C_BRED = '\x1b[1;31m'
C_BWHITE = '\x1b[1;37m'


def get_arguments():
    global DEBUG
    global FEED
    global LIST

    # parse commandline arguments
    parser = argparse.ArgumentParser(description="weo-0.1.5: watch episode of")
    parser.add_argument('-v', '--verbose', help='enable debugging', action='count')
    parser.add_argument('-l', '--list', help='list known feeds', action='store_true')
    parser.add_argument('feed', metavar='FEED', help='feed shortcut', type=str, nargs='?')

    args = vars(parser.parse_args())

    if args["verbose"] is not None:
        if args["verbose"] > 0:
            DEBUG = True
    if args["list"] is not None:
        if args["list"] > 0:
            LIST = True
    if args["feed"] is not None:
        if DEBUG:
            print("feed = " + str(args["feed"]))
        FEED = args["feed"]


def get_config():
    global PLAYER

    try:
        with open(HOME_DIR + "/" + CONFIG_FILE) as config_file:
            for config_line in config_file:
                if "player" in config_line:
                    PLAYER = config_line.split("=")[1].strip()
                    if DEBUG:
                        print('PLAYER = "' + PLAYER + '"')
            if DEBUG:
                print("config_line = " + config_line)
    except:
        print('no configuration file at "' + HOME_DIR + '/' + CONFIG_FILE \
        + '", using defaults')


feeds_json = None

def get_feeds():
    global feeds_json

    try:
        with open(HOME_DIR + "/" + FEED_FILE) as json_file:
            feeds_json = json.load(json_file)
    except:
        print('please ensure that "~/' + FEED_FILE \
        + '" is existing, readable and contains valid JSON.')
        sys.exit(5)

    if feeds_json is not None:
        if DEBUG:
            print("feeds json = " + str(feeds_json))
    else:
        print('"~/' + FEED_FILE + '" is empty or does not contain JSON')


def play(url):
    if DEBUG:
        print("url = " + url)

    try:
        play_cmd = PLAYER.split(" ")
        if ytdl_backend:
            play_cmd.append("--ytdl-raw-options=playlist-items=1")
        play_cmd.append(url)
        if DEBUG:
            print("play_cmd = " + str(play_cmd))
            subprocess.call(play_cmd)
        else:
            subprocess.call(
                play_cmd,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
    except:
        print('could not use "' + PLAYER  + '" to play episode')


def get_video_link(enclosure, link_type):
    video_link = None
    video_link_quicktime = None

    for item in enclosure:
        if "video/mp4" in item["type"]:
            video_link = item[link_type]
        elif "video/quicktime" in item["type"]:
            video_link_quicktime = item[link_type]
            break

    if video_link == None:
        for item in enclosure:
            if "text/html" in item["type"]:
                video_link = item[link_type]

    if video_link == None:
        video_link = video_link_quicktime

    return video_link


def is_matching(feed, current_item):
    matching = False

    publish_date = current_item['published_parsed']
    if DEBUG:
        print("publish_date = " + str(publish_date))
    publish_date_dt = datetime.datetime(
        publish_date.tm_year,
        publish_date.tm_mon,
        publish_date.tm_mday,
        publish_date.tm_hour,
        publish_date.tm_min
    )
    today = datetime.datetime.today()
    published_uts = publish_date_dt.timestamp()
    today_uts = today.timestamp()
    if DEBUG:
        print("today = " + str(today))
    match_type = feeds_json[feed]["match_type"]
    match = feeds_json[feed]["match"]

    # match by day
    if match_type == "d":
        if match == 0:
            if today.year == publish_date.tm_year \
            and today.month == publish_date.tm_mon \
            and today.day == publish_date.tm_mday:
                matching = True
        else:
            day_match = match * 86400
            if DEBUG:
                print(str(today_uts - day_match) + " <? " \
                + str(published_uts) + ", day_match = " \
                + str(day_match))
            if (today_uts - day_match) < published_uts:
                matching = True

    # match by week
    elif match_type == "w":
        if match == 0:
            todays_week = today.strftime("%W")
            published_week = publish_date_formatted.strftime("%W")
            if DEBUG:
                print(todays_week + " ?= " + published_week)
            if todays_week == published_week:
                matching = True
        else:
            week_match = match * 604800
            if DEBUG:
                print(str(today_uts - week_match) + " <? " \
                + str(published_uts) + ", week_match = " \
                + str(week_match))
            if (today_uts - week_match) < published_uts:
                matching = True

    # match by month
    elif match_type == "m":
        if match == 0:
            if today.year == publish_date.tm_year \
            and today.month == publish_date.tm_mon:
                matching = True
        else:
            month_match = match * 18144000
            if DEBUG:
                print(str(today_uts - month_match) + " <? " \
                + str(published_uts) + ", month_match = " \
                + str(month_match))
            if (today_uts - month_match) < published_uts:
                matching = True

    else:
        print("match_type '" + match_type + "' not implemented")
        sys.exit(5)

    return matching


def is_existing_feed(feed):
    existing = False

    try:
        feed_url = feeds_json[feed]["url"]
        existing = True
    except:
        if feed is not None:
            print("'" + feed + "' is not known to weo")
        else:
            print('please specify a feed shortcut that is known to weo')

    if existing is False:
        list_feeds()

    return existing


def list_feeds():
    print('following feeds are configured in "~/' + FEED_FILE + '":')
    for current_feed in feeds_json:
        print("  " + str(current_feed))


def fetch_and_play(feed):
    global ytdl_backend

    play_now = False
    expected_date = datetime.datetime.today()

    feed_url = feeds_json[feed]["url"]

    # check whether youtube-dl backend should be used (not XML from YT)
    try:
        feed_url_type = feeds_json[feed]["url_type"]
        if feed_url_type == "yt":
            ytdl_backend = True
            print("using youtube-dl backend")
    except:
        ytdl_backend = False

    if ytdl_backend:
        # use url directly
        # TODO
        # - select playlist-item via parameter
        item_video_link = feed_url
        play_now = True
    else:
        # XML
        feed_parsed = feedparser.parse(feed_url)
        feed_title = feed_parsed['channel']['title']
        if DEBUG:
            print("title = " + feed_title)

        # sort feed items to ensure we get the latest episode
        feed_sorted = sorted(
            feed_parsed["items"],
            key=lambda entry: entry["published_parsed"]
        )
        feed_sorted.reverse()
        current_item = feed_sorted[0]
        publish_date = current_item['published_parsed']

        # check wether last episode is from today
        if is_matching(feed, current_item):
            print('last episode of "' + str(feed_title) + '" is current, playing now ..')
            play_now = True
        else:
            print('last episode of "' + str(feed_title) + '" is from ' \
            + str(publish_date.tm_mday) \
            + '.' + str(publish_date.tm_mon) + '.' + str(publish_date.tm_year))

        item_video_link = None

        if DEBUG:
            print("current_item = " + str(current_item))

        if "yt_channelid" in current_item:
            # use "links" if this is a youtube-channel
            if "links" in current_item:
                item_video_link = get_video_link(current_item['links'], "href")
        else:
            if "media_content" in current_item:
                item_video_link = get_video_link(current_item['media_content'], "url")
            elif "links" in current_item:
                item_video_link = get_video_link(current_item['links'], "href")

    if DEBUG:
        print("video link = " + str(item_video_link))

    if item_video_link is None:
        print("cannot find video link")
        sys.exit(3)

    if play_now is False:
        # ask to play anyway
        try:
            print('play anyway? [' + C_BWHITE + 'y' + C_CLEAR + '/' + C_BRED \
            + 'N' + C_CLEAR + '] ', end="", flush=True)
            answer = input()
            if DEBUG:
                print("answer = '" + answer + "'")
            if answer in ["y", "Y", "yes", "Yes", "YES"]:
                print("playing .. ")
                play_now = True
            else:
                play_now = False
        except:
            print(" aborted ")
            sys.exit(4)

    if play_now:
        play(item_video_link)

    if DEBUG:
        print("published parsed = " + str(publish_date))
        for item_property in current_item:
            if DEBUG:
                print(str(item_property) + " = " + str(current_item[item_property]))


def main():
    get_arguments()
    if DEBUG:
        print("debug enabled")
    get_config()
    get_feeds()

    if LIST:
        list_feeds()
    elif is_existing_feed(FEED):
        fetch_and_play(FEED)


main()

