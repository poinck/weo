#!/usr/bin/python3
#
# weo:
# watch episode of feeds listed in JSON-formatted ~/.weofeeds
#
# by Andr√© Klausnitzer, no license

import feedparser
import json
import os
import sys
import time
import datetime
import argparse
import configparser
import subprocess
from string import Template
from datetime import date

DEBUG = False
LIST = False
ADD_PARAMS = None
DELETE = False
CURL = False

# defaults
PLAYER = "mpv"
CONFIG_FILE = ".weorc"
FEED_FILE = ".weofeeds"
HOME_DIR = os.path.expanduser("~")
FEED = None

# colors
C_CLEAR = '\x1b[0m'
C_BRED = '\x1b[1;31m'
C_BPURPLE = '\x1b[1;35m'
C_BWHITE = '\x1b[1;37m'
C_YELLOW = '\x1b[33m'
C_BLUE = '\033[94m'
C_BLACK = '\033[30m'

# other shell escapes
TAB = "\t"

feeds_json = None

def process_arguments():
    global DEBUG

    parser = argparse.ArgumentParser(description="weo-7: watch episode of")
    subparsers = parser.add_subparsers()

    parser.add_argument('-v', '--verbose', help='enable debugging', action='store_true', default=False)

    # weo play
    play_parser = subparsers.add_parser('play', help='play feed or episode', aliases=['p'])
    play_parser.add_argument('feed', help='feed shortcut')
    play_parser.add_argument('item', help='last episode number (default: 0, newest)', type=int, default=0, nargs='?')
    play_parser.add_argument('-p', '--print', dest="print_only", help='print only url of playing (experimental)', action='store_true')
    play_parser.set_defaults(func=play_command)

    # weo list
    list_parser = subparsers.add_parser('list', help='list feeds or feed items', aliases=['l'])
    list_parser.add_argument('feed', help='list episodes of this feed', nargs='?')
    list_parser.set_defaults(func=list_command)

    # weo delete
    delete_parser = subparsers.add_parser('delete', help='delete feed', aliases=['d'])
    delete_parser.add_argument('feed', help='feed to delete')
    delete_parser.set_defaults(func=delete_command)

    #weo add
    add_parser = subparsers.add_parser('add', help='add feed', aliases=['a'])
    add_parser.add_argument('feed', help='feed shortcut')
    add_parser.add_argument('url', help='feed url')
    add_parser.add_argument('-n', '--name', help='feed name', default="")
    add_parser.add_argument('-m', '--match', help='match', type=int, default=1)
    add_parser.add_argument('-t', '--match-type', help='match type', default="w")
    add_parser.set_defaults(func=add_command)

    # weo edit
    edit_parser = subparsers.add_parser('edit', help='edit feed', aliases=['e'])
    edit_parser.add_argument('feed', help='feed shortcut')
    edit_parser.add_argument('url', help='feed url', nargs='?')
    edit_parser.add_argument('-n', '--name', help='feed name')
    edit_parser.add_argument('-m', '--match', help='match')
    edit_parser.add_argument('-t', '--match-type', help='match type')
    edit_parser.set_defaults(func=edit_command)


    args = parser.parse_args()
    variables = vars(args)

    DEBUG = variables["verbose"]

    # load config file and feeds json
    get_config()
    get_feeds()

    args.func(args)
    


# Command Functions
# check and destructure arguments before calling the appropriate function

def play_command(args):
    feed = args.feed
    item = args.item
    print_only = args.print_only

    if feed_is_known_and_has_url(feed):
        fetch_and_play(feed, item, print_only=print_only)
    else:
        print("" + feed + " is not known to weo")
        sys.exit(2)
    
    
def list_command(args):
    feed = args.feed
    if feed is not None:
        if feed_is_known_and_has_url(feed):
            list_feed(feed)
        else:
            print("" + feed + " is not known to weo. Here are all known feeds:")
            list_all_feeds()
            sys.exit(2)
    else:
       list_all_feeds()

def add_command(args):
    feed = args.feed
    url = args.url
    name = args.name
    match_type = args.match_type
    match = args.match

    if feed in feeds_json:
        print("feed already exists. Did you mean to edit?")
        sys.exit(2)

    if not is_valid_url(url):
        print(f"invalid url {url}")
        sys.exit(2)


    set_feed(feed, url, name, match_type, match)
    print(f"added feed {feed} to {HOME_DIR}/{FEED_FILE}")

def edit_command(args):
    feed = args.feed

    if not feed_is_known(args.feed):
        print("feed not known to weo. Did you mean to add?")
        sys.exit(2)

    existing_url = feeds_json[feed]["url"]
    existing_name = feeds_json[feed]["name"]
    existing_match_type = feeds_json[feed]["match_type"]
    existing_match = feeds_json[feed]["match"]

    # if only feed name is given, print usage with existing values
    if args.name is None and args.url is None and args.match is None and args.match_type is None:
        print(
            f"weo edit: only feed name {feed} given.\n",
            f"Supply values you want change change.\n",
            f"usage: weo edit {feed} {existing_url} -n {existing_name} -m {existing_match} -t {existing_match_type}\n"
        )
        sys.exit(2)

    url = args.url or existing_url
    name = args.name or existing_name
    match_type = args.match_type or existing_match_type
    match = args.match or existing_match

    set_feed(feed, url, name, match_type, match)
    print(f"edited feed {feed} in  {HOME_DIR}/{FEED_FILE}")

def delete_command(args):
    delete_feed(args.feed)


# A url must contain the protocol (i.e. https)
# TODO: use "validators" package?
def is_valid_url(url):
    if url is None:
        return False
    if url.startswith("http://") or url.startswith("https://"):
        return True
    else:
        return False

def feed_is_known(feed):
    return feed in feeds_json

def feed_is_known_and_has_url(feed):
    try:
        return feeds_json[feed]["url"] is not None
    except:
        return False


def set_feed(feed, url, name, match_type, match):

    if feed is None:
        print("please specify feed")
        sys.exit(2)

    if not is_valid_url(url):
        print("invalid url")
        sys.exit(2)
    
    feeds_json[feed] = {"url": url, "name": name, "match_type": match_type, "match": match}
    write_feeds_file()

    
def write_feeds_file():
    with open(HOME_DIR + "/" + FEED_FILE, 'w') as feeds_file:
        json.dump(feeds_json, feeds_file, sort_keys=True, indent=4)


def delete_feed(feed):
    if DEBUG:
        print("delete feed:", feed)

    if feed in feeds_json:
        del feeds_json[feed]
        write_feeds_file()
        print(f"deleted feed {feed} from {HOME_DIR}/{FEED_FILE}")
    else:
        print(f"Cannot delete feed {feed} because it does not exist")


def get_config():
    global PLAYER

    try:
        with open(HOME_DIR + "/" + CONFIG_FILE) as config_file:
            for config_line in config_file:
                if "player" in config_line:
                    PLAYER = config_line.split("=")[1].strip()
                    if DEBUG:
                        print('PLAYER = "' + PLAYER + '"')
            if DEBUG:
                print("config_line = " + config_line)
    except:
        print('no configuration file at "' + HOME_DIR + '/' + CONFIG_FILE \
        + '", using defaults')


def get_feeds():
    global feeds_json
    path = f"{HOME_DIR}/{FEED_FILE}"

    try:
        with open(path) as json_file:
            feeds_json = json.load(json_file)
    except:
        print(f'please ensure that "{path}" exists and is valid JSON')
        sys.exit(5)

    if feeds_json is not None:
        if DEBUG:
            print("feeds json =", feeds_json)
    else:
        print(f'"{path  }" is empty or or does not contain valid JSON')

        
def play(url):
    if DEBUG:
        print("url =", url)

    try:
        play_cmd = PLAYER.split(" ")
        play_cmd.append(url)
        if DEBUG:
            print("play_cmd =", str(play_cmd))
            subprocess.call(play_cmd)
        else:
            subprocess.call(
                play_cmd,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
    except:
        print(f'could not use "{PLAYER}" to play episode')


def get_video_link(enclosure, link_type):
    video_link = None
    video_link_quicktime = None

    for item in enclosure:
        if "video/mp4" in item["type"]:
            video_link = item[link_type]
        elif "video/quicktime" in item["type"]:
            video_link_quicktime = item[link_type]
            break

    if video_link == None:
        for item in enclosure:
            if "text/html" in item["type"]:
                video_link = item[link_type]

    if video_link == None:
        video_link = video_link_quicktime

    return video_link


def is_matching(feed, current_item):
    matching = False

    publish_date = current_item['published_parsed']
    if DEBUG:
        print("publish_date = " + str(publish_date))
    publish_date_dt = datetime.datetime(
        publish_date.tm_year,
        publish_date.tm_mon,
        publish_date.tm_mday,
        publish_date.tm_hour,
        publish_date.tm_min
    )
    today = datetime.datetime.today()
    published_uts = publish_date_dt.timestamp()
    today_uts = today.timestamp()
    if DEBUG:
        print("today = " + str(today))
    match_type = feeds_json[feed]["match_type"]
    match = feeds_json[feed]["match"]

    # match by day
    if match_type == "d":
        if match == 0:
            if today.year == publish_date.tm_year \
            and today.month == publish_date.tm_mon \
            and today.day == publish_date.tm_mday:
                matching = True
        else:
            day_match = match * 86400
            if DEBUG:
                print(str(today_uts - day_match) + " <? " \
                + str(published_uts) + ", day_match = " \
                + str(day_match))
            if (today_uts - day_match) < published_uts:
                matching = True

    # match by week
    elif match_type == "w":
        if match == 0:
            todays_week = today.strftime("%W")
            published_week = publish_date_formatted.strftime("%W")
            if DEBUG:
                print(todays_week + " ?= " + published_week)
            if todays_week == published_week:
                matching = True
        else:
            week_match = match * 604800
            if DEBUG:
                print(str(today_uts - week_match) + " <? " \
                + str(published_uts) + ", week_match = " \
                + str(week_match))
            if (today_uts - week_match) < published_uts:
                matching = True

    # match by month
    elif match_type == "m":
        if match == 0:
            if today.year == publish_date.tm_year \
            and today.month == publish_date.tm_mon:
                matching = True
        else:
            month_match = match * 18144000
            if DEBUG:
                print(str(today_uts - month_match) + " <? " \
                + str(published_uts) + ", month_match = " \
                + str(month_match))
            if (today_uts - month_match) < published_uts:
                matching = True

    else:
        print(f"match_type '{match_type}' not implemented")
        sys.exit(5)

    return matching

def list_feed(feed):
       # list titles of feed episodes
    try:
        feed_name = feeds_json[feed]["name"]
        feed_name = f"({feed_name}) "
    except:
        feed_name = ""

    try:
        feed_url_type = feeds_json[feed]["url_type"]
    except:
        feed_url_type = ""

    col = C_BWHITE
    if feed_url_type == "template":
        col = C_BPURPLE
    try:
        feed_url = feeds_json[feed]["url"]
        if DEBUG:
            print("feed_url = " + feed_url)
        print(col + feed + C_CLEAR + " " + feed_name \
        + "has following episodes:")
    except:
        print(f"no url for {feed}.")
        sys.exit(4)

    if feed_url_type == "template":
        # template
        print("EPISODE  minutes  date")
        url_template = Template(feed_url)
        match_type = "d"

        try:
            match_type = feeds_json[feed]["match_type"]
        except:
            if DEBUG:
                print("no match_type, using default, daily (d).")

        if match_type == "d":
            start_date = date.today()
            for i in range(0, 14):
                next_date = start_date - datetime.timedelta(days = i)
                episode_title = str(next_date)
                print("  " + str(i) + TAB + "   " + C_YELLOW \
                + "-" \
                + C_CLEAR + TAB + "  " \
                + str(episode_title))
        else:
            print("for templates currently only daily match_type is supported; please adjust your ~/.weofeeds")

    else:
        # rss
        print("EPISODE  minutes  name")
        try:
            feed_parsed = feedparser.parse(feed_url)
            # sort feed items to ensure we get the latest episode
            feed_sorted = sorted(
                feed_parsed["items"],
                key=lambda entry: entry["published_parsed"],
                reverse=True
            )
            for i, feed_item in enumerate(feed_sorted[:15]):
                if DEBUG:
                    print("feed_item = " + str(feed_item))
                episode_title = feed_item["title"]
                try:
                    feed_duration = feed_item["duration"]
                    feed_duration = int(int(feed_duration) / 60)
                except:
                    feed_duration = "-"
                if DEBUG:
                    print("feed_duration = " + str(feed_duration))
                if len(episode_title) > 60:
                    episode_title = episode_title[0:60] + ".."
                print(f"  {i}{TAB}   {C_YELLOW}{feed_duration}{C_CLEAR}  {episode_title}")
        except:
            print("could not parse RSS for " + feed + ".")
            sys.exit(5)


def list_all_feeds():
    print('following feeds are configured in "~/' + FEED_FILE + '":')
    for current_feed in feeds_json:
        try:
            feed_name = feeds_json[current_feed]["name"]
        except:
            feed_name = ""
        try:
            feed_url_type = feeds_json[current_feed]["url_type"]
        except:
            feed_url_type = ""

        col = C_BWHITE
        if feed_url_type == "template":
            col = C_BPURPLE
        if feed_name == "":
            print("  " + col + str(current_feed) + C_CLEAR)
        else:
            print("  " + col + str(current_feed) + C_CLEAR + TAB + "  " \
            + str(feed_name))


def fetch_and_play(feed, item = 0, print_only = False):
    play_now = False
    expected_date = datetime.datetime.today()

    feed_url = feeds_json[feed]["url"]
    try:
        feed_url_type = feeds_json[feed]["url_type"]
    except:
        feed_url_type = ""

    if DEBUG:
        print(f'item = {item}')

    if feed_url_type == "template":
        # template
        url_template = Template(feed_url)
        if DEBUG:
            print("feed_url = " + feed_url)
            print("url_template = " + str(url_template))
        match_type = "d"
        try:
            match_type = feeds_json[feed]["match_type"]
        except:
            if DEBUG:
                print("no match_type, using default, daily (d).")
        if match_type == "d":
            start_date = date.today()
            next_date = start_date - datetime.timedelta(days = item)
            play_date = next_date.strftime("%Y%m%d")
            print("playing episode " + str(item) \
            + " of " \
            + C_BPURPLE + str(feed) + C_CLEAR + " from " \
            + str(next_date) + " now ..")
            item_video_link = url_template.substitute({"yyyymmdd" : str(play_date)})
            play_now = True

        else:
            print("for templates currently only daily match_type is supported; please adjust your ~/.weofeeds")

    else:
        # rss
        feed_parsed = feedparser.parse(feed_url)
        feed_title = feed_parsed['channel']['title']
        if DEBUG:
            print("title = " + feed_title)

        # sort feed items to ensure we get the latest episode
        if DEBUG:
            print(feed_parsed)

        feed_sorted = sorted(
            feed_parsed["items"],
            key=lambda entry: entry["published_parsed"],
            reverse=True
        )
        current_item = feed_sorted[item]
        publish_date = current_item['published_parsed']
        episode_title = feed_sorted[item]["title"]
        episode_title = " (" + episode_title + ") "

        # check wether last episode is within specified time frame
        if is_matching(feed, current_item):
            print(f"last episode {episode_title} of {C_BWHITE}{feed}{C_CLEAR} is current, playing now ..")
            play_now = True
        else:
            publish_date_str = f"{publish_date.tm_year}\-{publish_date.tm_mon}-{publish_date.tm_mday}"
            if item > 0:
                print(
                    f"playing episode {C_BWHITE}{item}{C_CLEAR} of {C_BWHITE}{feed}{C_CLEAR}"
                    f" from {publish_date_str}"
                )
                play_now = True
            else:
                print(f"last episode of {C_BWHITE}{feed}{C_CLEAR} is from {publish_date_str}")

        item_video_link = None

        if DEBUG:
            print("current_item = " + str(current_item))

        if "yt_channelid" in current_item:
            # use "links" if this is a youtube-channel
            if "links" in current_item:
                item_video_link = get_video_link(current_item['links'], "href")
        else:
            if "media_content" in current_item:
                item_video_link = get_video_link(current_item['media_content'], "url")
            elif "links" in current_item:
                item_video_link = get_video_link(current_item['links'], "href")

        if DEBUG:
            print("video link = " + str(item_video_link))

        if item_video_link is None:
            print("cannot find video link")
            sys.exit(3)

        if play_now is False:
            # ask to play anyway
            try:
                print('play anyway? [' + C_BWHITE + 'y' + C_CLEAR + '/' + C_BRED \
                + 'N' + C_CLEAR + '] ', end="", flush=True)
                answer = input()
                if DEBUG:
                    print("answer = '" + answer + "'")
                if answer in ["y", "Y", "yes", "Yes", "YES"]:
                    print("playing .. ")
                    play_now = True
                else:
                    play_now = False
            except:
                print(" aborted ")
                sys.exit(4)

        if DEBUG:
            print("published parsed = " + str(publish_date))
            for item_property in current_item:
                if DEBUG:
                    print(str(item_property) + " = " \
                    + str(current_item[item_property]))

    if play_now:
        if print_only:
            print(item_video_link)
        else:
            play(item_video_link)


def main():
    process_arguments()
    if DEBUG:
        print("debug enabled")

if __name__ == "__main__":
    main()
