#!/usr/bin/python3
#
# weo-0.0.1:
# this first version of weo (watch episode of) can just read the
# "Tagesschau 20 Uhr (HD)"-feed
#
# TODO:
# - get feeds and their attributes (expected date and time) from a feeds-file
# - get player configuration from file
#
# by AndrÃ© Klausnitzer, no license

import feedparser
import json

import os
import sys
import time
import datetime
import argparse
import configparser
from subprocess import call

DEBUG = False

# defaults
PLAYER = "mplayer"
CONFIG_FILE = ".weorc"
FEED_FILE = ".weofeeds"
HOME_DIR = os.path.expanduser("~")
FEED = None

def get_arguments():
    global DEBUG
    global FEED

    # parse commandline arguments
    parser = argparse.ArgumentParser(description="weo - watch episode of")
    parser.add_argument('-v', '--verbose', help='enable debugging', action='count')
    parser.add_argument('feed', metavar='FEED', help='feed shortcut', nargs=1)

    args = vars(parser.parse_args())

    if args["verbose"] is not None:
        if args["verbose"] > 0:
            DEBUG = True
    if args["feed"] is not None:
        if DEBUG:
            print(str(args["feed"][0]))
        FEED = args["feed"][0]


def get_config():
    if DEBUG:
        print('TODO  get_config()')


feeds_json = None

def get_feeds():
    global feeds_json

    with open(HOME_DIR + "/" + FEED_FILE) as json_file:
        feeds_json = json.load(json_file)

    if feeds_json is not None:
        if DEBUG:
            print("feeds json = " + str(feeds_json))
    else:
        print("no feed file or feed file not valid at " + HOME_DIR + "/" + FEED_FILE)


def play(url):
    if DEBUG:
        print("url = " + url)

    call([PLAYER, url])


def play_tagesschau():
    #feed_url = "http://www.tagesschau.de/export/video-podcast/webxl/tagesschau/"
    fetch_and_play("ts")


def fetch_and_play(feed):
    play_now = False
    expected_date = datetime.datetime.today()

    feed_url = feeds_json[feed]["url"]
    feed = feedparser.parse(feed_url)
    feed_title = feed['channel']['title']
    if DEBUG:
        print("title = " + feed_title)

    current_item = feed['items'][0]
    publish_date = current_item['published_parsed']

    # check wether last episode is from today
    if expected_date.year == publish_date.tm_year \
    and expected_date.month == publish_date.tm_mon \
    and expected_date.day == publish_date.tm_mday:
        print("last episode is from today, playing now ..")
        play_now = True
    else:
        print("last episode is from " + str(publish_date.tm_mday) + "." + str(publish_date.tm_mon) + "." + str(publish_date.tm_year))

    item_video_link = None
    if "media_content" in current_item:
        item_video_link = current_item['media_content'][0]['url']
    elif "links" in current_item:
        item_video_link = current_item['links'][0]['href']

    if DEBUG:
        print("video link = " + str(item_video_link))

    if item_video_link is None:
        print("feed has no video link")
        sys.exit(3)

    if play_now is False:
        # ask or wait 10 seconds
        print("play in .. ", end="", flush=True)
        i = 9
        while i > 0:
            print(str(i) + " ", end="", flush=True)
            time.sleep(1)
            i -= 1
        print("")

    play(item_video_link)

    if DEBUG:
        print("published parsed = " + str(publish_date))
    for item_property in current_item:
        if DEBUG:
            print(str(item_property) + " = " + str(current_item[item_property]))


def main():
    get_arguments()
    get_config()
    get_feeds()

    if DEBUG:
        print("debug enabled")

    fetch_and_play(FEED)
    #play_tagesschau()


main()

